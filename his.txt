  836  git commit -am "Change the commit"
  837  git log
  838  git branch yoo-pre c1b27e9 
  839  git switch yoo-pre
  840  cat index.html 
  841  git switch master
  842  cat index.html
  843  git branch -a
  844  git diff master..sidebar
  845  git diff yoo-pree..sidebar
  846  git diff yoo-pre..sidebar
  847  git branch -D sidebar
  848  git log
  849  git checkout -b new-git-project c1b27e9544913
  850  git diff new-git-project..master
  851  vi index.html 
  852  git add -A
  853  git commit -m "New index.html file"
  854  git brach -a
  855  git branch -a
  856  git switch master
  857  git merge new-git-project
  858  git status
  859  git brach -D new-git-project yoo-pre
  860  git branch -D new-git-project yoo-pre
  861  vi css/app.css 
  862  git log
  863  git status
  864  git commit -am "Change the app.css"
  865  git status
  866  git branch sidebar 7345488e8
  867  git log --oneline --decorate
  868  git status
  869  git switch sidebar
  870  git log --oneline --decorate
  871  vi index.html 
  872  git add .
  873  git commit -m "Changed index.html"
  874  git commit -am "Changed index.html"
  875  git log --stat
  876  git diff
  877  echo " " >> index.html 
  878  git diff
  879  git diff -t
  880  git diff -w
  881  git branch -a
  882  git checkout -b footer master
  883  git commit -m ""
  884  vi index.html 
  885  git commit -m "Commit"
  886  git commit -am "Commit"
  887  git checkout -b footer master
  888  vi index.html 
  889  git commit -m "Added footer"
  890  git commit -am "Added footer"
  891  git log --oneline --decorate --graph --all
  892  git log --oneline --decorate --graph
  893  git log --oneline --decorate --graph --all
  894  git log --decorate --graph --all
  895  git status
  896  git switch master
  897  git merge footer
  898  git log
  899  git log -all
  900  git log --all
  901  git status
  902  cat index.html 
  903  git reset --hard HEAD^
  904  cat index.html 
  905  git log --all
  906  git merge footer
  907  git log --oneline --decorate --graph --all
  908  git merge sidebar
  909  git status
  910  tree
  911  sudo apt-get install tree
  912  cd Desktop/dlt_now/
  913  tree
  914  tree py_wifi/
  915  cd
  916  cat ./.bashrc | grep force_color_prompt
  917  git clone https://github.com/Bayurzx/rally_tally.git ~./
  918  ls
  919  ls ~
  920  ls ~./
  921  rm ~./
  922  rm -rf ~./
  923  ls ~./
  924  cd
  925  git clone https://github.com/Bayurzx/rally_tally.git
  926  cd rally_tally/
  927  git status
  928  vi README.md 
  929  git commit -m 'Removed with space'
  930  git commit -am 'Removed whitespace'
  931  git log
  932  git branch newbranch
  933  git branch
  934  git commit --amend
  935  git log
  936  vi README.md 
  937  git commit -am "Revert changes"
  938  vi README.md 
  939  git commit -am "Revert new changes"
  940  git log
  941  git revert 7140157
  942  git status
  943  vi README.md 
  944  git revert --skip
  945  vi README.md 
  946  git status
  947  git log
  948  git revert 7140157
  949  git add README.md 
  950  git commit -m "Merge Conflict Fix"
  951  git status
  952  vi README.md 
  953  git log
  954  git reflog
  955  nmap --help
  956  git reflog -A
  957  git reflog --help
  958  git reflog -a
  959  git switch newbranch
  960  git merge newbranch
  961  git merge master
  962  git merge --help
  963  git status
  964  vi README.md 
  965  git merge --abort
  966  vi README.md 
  967  git merge --help | grep incoming
  968  git merge --help | grep abort
  969  git log --graph
  970  git status
  971  git switch master
  972  git status
  973  git log --graph
  974  git diff 8fed2055..75d460c
  975  git reset 8fed205
  976  git diff 8fed2055..75d460c
  977  vi README.md 
  978  git reset --hard 8fed205
  979  git reset --hard 4cc6d634
  980  vi README.md 
  981  cd ..
  982  rm -rf rally_tally/
  983  exit
  984  cd Desktop/
  985  cp -r /home/bayurzx/remote/ .
  986  cd remote/
  987  ls
  988  ls -a
  989  gh repo create
  990  git remote
  991  git remote -v
  992  git remote add origin https://github.com/Bayurzx/remote.git 
  993  git status
  994  git branch -a
  995  git push origin master
  996  git status
  997  git add . && git cmmit -m "Push files to remote origin"
  998  git add . && git commit -m "Push files to remote origin"
  999  git fork
 1000  git fsck --help
 1001  git shortlog
 1002  cd ..
 1003  git clone https://github.com/GoogleChrome/lighthouse.git
 1004  cd lighthouse/
 1005  git shortlog
 1006  git shortlog -s -n
 1007  git log --author=Paul
 1008  git log --grep=bug
 1009  cd
 1010  mkdir remote
 1011  echo "" > remote/index.html && echo "" > remote/app.css && echo "" > remote/README.md
 1012  cd remote/
 1013  ls
 1014  vi README.md 
 1015  vi app.css 
 1016  vi index.html 
 1017  git init
 1018  git add . && git commit -m 'Initial Commit'
 1019  pwd
 1020  cd
 1021  ls
 1022  ls -r cmmit
 1023  ls -r commit
 1024  cd commit/
 1025  git log
 1026  git rebase -i HEAD~3
 1027  git rebase --edit-todo
 1028  git rebase --continue
 1029  git log
 1030  cd
 1031  ls
 1032  rm -rf remote/ commit/
 1033  ls
 1034  cd /etc/ssh/
 1035  ls
 1036  cd /etc/ssh/ && ls
 1037  ls -al
 1038  cd ./Desktop/Salvation
 1039  cd Website\ Images/
 1040  cd Landscape/
 1041  ls
 1042  mv Pix\ \(*\).jpg Pix_*.jpg
 1043  mv ./Pix\ \(*\).jpg ./Pix_*.jpg
 1044  ls
 1045  mv 'Pix\ \(*\).jpg' 'Pix_*.jpg'
 1046  mv 'Pix (*).jpg' 'Pix_*.jpg'
 1047  for file in *.jpg; do mv "$file" "${file/Pix (/Pix_}"; done
 1048  ls
 1049  for file in *.jpg; do mv "$file" "${file/).jpg/.jpg}"; done
 1050  ls
 1051  cd ../Portrait/
 1052  for file in *.jpg; do mv "$file" "${file/Pix (/Pix_}"; done
 1053  for file in *.jpg; do mv "$file" "${file/).jpg/.jpg}"; done
 1054  cd ..
 1055  cd Website_Images/
 1056  cd new/
 1057  for file in *.jpg; do mv "$file" "${file/Pix (/Pix_}"; done
 1058  for file in *.jpg; do mv "$file" "${file/).jpg/.jpg}"; done
 1059  su
 1060  cd Desktop/Azure/cloud_devops/
 1061  sudo chmod 400 AWS_EC2_DEMO.pem 
 1062  ls AWS_EC2_DEMO.pem 
 1063  ls AWS_EC2_DEMO.pem -l
 1064  ssh -i "AWS_EC2_DEMO.pem" ec2-user@ec2-3-89-127-127.compute-1.amazonaws.com
 1065  sudo ls
 1066  sudo ls -l
 1067  sudo chmod 200 AWS_EC2_DEMO.pem 
 1068  sudo ls -l
 1069  sudo chmod 400 AWS_EC2_DEMO.pem 
 1070  sudo ls -l
 1071  sudo chmod 600 AWS_EC2_DEMO.pem 
 1072  sudo ls -l
 1073  sudo chmod 400 AWS_EC2_DEMO.pem 
 1074  sudo ls -l
 1075  ssh -i "AWS_EC2_DEMO.pem" ec2-user@ec2-3-89-127-127.compute-1.amazonaws.com
 1076  sudo ls -l AWS_EC2_DEMO.pem 
 1077  mkdir ~/devops
 1078  ls
 1079  ls ~/devops/
 1080  cp AWS_EC2_DEMO.pem ~/devops/
 1081  cd ~/devops/
 1082  ls
 1083  cd ..
 1084  ls
 1085  cd devops/
 1086  ls
 1087  sudo chmod 400 AWS_EC2_DEMO.pem 
 1088  ls -l
 1089  cd ~
 1090  cd devops/
 1091  ls -l
 1092  ssh -i "AWS_EC2_DEMO.pem" ec2-user@ec2-3-89-127-127.compute-1.amazonaws.com
 1093  s
 1094  ls
 1095  su
 1096  sudo ls
 1097  sudo passwd
 1098  cd
 1099  ls
 1100  mkdir aws
 1101  cd aws
 1102  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
 1103  unzip awscliv2.zip
 1104  sudo apt-get install unzip
 1105  unzip awscliv2.zip
 1106  ls
 1107  ls aws
 1108  sudo ./aws/install
 1109  /usr/local/bin/aws --version
 1110  where aws-cli
 1111  aws
 1112  where aws
 1113  aws help
 1114  aws -v
 1115  which aws
 1116  aws login --help
 1117  cd
 1118  ls
 1119  cd aws
 1120  cp /mnt/c/Users/USER/Desktop/myEC2.pem .
 1121  ls
 1122  chmod 400 myEC2.pem
 1123  ssh -i "myEC2.pem" ec2-user@ec2-44-204-19-101.compute-1.amazonaws.com
 1124  curl https://ifconfig.me/ip
 1125  cd
 1126  aws iam list-users
 1127  cd
 1128  python3 -m pip -V
 1129  pip show ansible
 1130  python3 -m pip install --user ansible
 1131  ansible --version
 1132  ls al
 1133  ls -al
 1134  cd 3/exercises/2/
 1135  ls
 1136  ansible-playbook main.yml
 1137  aws
 1138  aws help
 1139  aws account help
 1140  aws s3 list
 1141  aws s3 ls
 1142  aws ec2 describe-instances    --query 'Reservations[*].Instances[*].PublicIpAddress'    --output text >> inventory
 1143  aws ec2 describe-instances    --query 'Reservations[*].Instances[*].PublicIpAddress'    --output text >> inventory --region us-east
 1144  aws configure
 1145  aws ec2 describe-instances    --query 'Reservations[*].Instances[*].PublicIpAddress'    --output text >> inventory
 1146  aws configure
 1147  aws ec2 describe-instances    --query 'Reservations[*].Instances[*].PublicIpAddress'    --output text >> inventory
 1148  cat inventory 
 1149  aws ec2 describe-instances    --query 'Reservations[*].Instances[*].PublicIpAddress'    --output text >> inventory
 1150  cat inventory 
 1151  echo "[all]" > inventory
 1152  aws ec2 describe-instances    --query 'Reservations[*].Instances[*].PublicIpAddress'    --output text >> inventory
 1153  cat inventory 
 1154  aws ec2 describe-instances
 1155  aws iam list-users
 1156  cd .. ; mkdir 3
 1157  cd 3
 1158  ls
 1159  touch inventory
 1160  echo [all] > inventory
 1161  ls
 1162  aws ec2 describe-instances         --query 'Reservations[*].Instances[*].PublicIpAddress'       --filters "Name=tag:Project,Values=udacity"       --output text >> inventory
 1163  ls
 1164  cat inventory 
 1165  ls
 1166  cat inventory 
 1167  aws ec2 describe-instances         --query 'Reservations[*].Instances[*].PublicIpAddress'       --filters "Name=tag:Project,Values=udacity"       --output text >> inventory
 1168  ls
 1169  cat inventory 
 1170  aws ec2 describe-instances    --query 'Reservations[*].Instances[*].PublicIpAddress'    --output text >> inventory
 1171  cat inventory 
 1172  rm inventory 
 1173  aws ec2 describe-instances         --query 'Reservations[*].Instances[*].PublicIpAddress'       --filters "Name=tag:Project,Values=udacity"       --output text >> inventory
 1174  ls
 1175  cat inventory 
 1176  cd ../../
 1177  git clone https://github.com/udacity/nd9991-c3-hello-world-exercise-solution.git solution
 1178  mv solution/ solutions/
 1179  ls
 1180  sudo mv solution/ solutions/
 1181  cd exercises/3/
 1182  ls
 1183  cat ls
 1184  cat inventory 
 1185  notepad inventory 
 1186  notepad.exe inventory 
 1187  cd
 1188  ls
 1189  cd devops/
 1190  ls
 1191  cp /mnt/c/Users/USER/Desktop/Azure/cloud_devops/3/exercises/4/myEC2.pem 
 1192  cp /mnt/c/Users/USER/Desktop/Azure/cloud_devops/3/exercises/4/myEC2.pem .
 1193  chmod 400 myEC2.pem
 1194  ls -al myEC2.pem 
 1195  ls -al  /mnt/c/Users/USER/Desktop/Azure/cloud_devops/3/exercises/4/myEC2.pem
 1196  ls
 1197  cp myEC2.pem /mnt/c/Users/USER/Desktop/Azure/cloud_devops/3/exercises/4/
 1198  cp  /mnt/c/Users/USER/Desktop/Azure/cloud_devops/3/exercises/4/
 1199  cp  /mnt/c/Users/USER/Desktop/Azure/cloud_devops/3/exercises/4/ .
 1200  cp -r  /mnt/c/Users/USER/Desktop/Azure/cloud_devops/3/exercises/4/ .
 1201  ls
 1202  ls -r /4
 1203  ls -r 4
 1204  cd 4/
 1205  ansible-playbook main-remote.yml -i inventory --private-key myEC2.pem
 1206  ls myEC2.pem -al
 1207  chmod 400 myEC2.pem
 1208  ls myEC2.pem -al
 1209  ansible-playbook main-remote.yml -i inventory --private-key myEC2.pem
 1210  ls
 1211  cd 3/exercises/
 1212  ls
 1213  mkdir 4
 1214  ls
 1215  cd 4
 1216  touch main-remote.yml
 1217  touch ./roles/setup/files/index.js
 1218  touch ./roles/setup/files/index.js -f
 1219  mkdir -p ./roles/setup/files && touch $_/ index.js
 1220  ls
 1221  rmdir roles/
 1222  rmdir roles/ -r
 1223  rmdir roles/ -rf
 1224  rm roles/ -r
 1225  rm index.js 
 1226  mkdir -p  && touch $_/index.js
 1227  mkdir -p ./roles/setup/tasks && touch $_/main.yml
 1228  start.exe .
 1229  start .
 1230  ls
 1231  touch inventory
 1232  echo [all] > inventory
 1233  aws ec2 describe-instances         --query 'Reservations[*].Instances[*].PublicIpAddress'       --filters "Name=tag:Project,Values=udacity"       --output text >> inventory
 1234  ansible-playbook main-remote.yml -i inventory --private-key myEC2.pem
 1235  ls myEC2.pem 
 1236  ls myEC2.pem -al
 1237  rm myEC2.pem 
 1238  ls myEC2.pem -al
 1239  ansible-playbook main-remote.yml -i inventory --private-key myEC2.pem
 1240  echo [all] > inventoryecho [all] > inventory
 1241  cd 
 1242  cd devops/
 1243  ls
 1244  ssh -i "myEC2.pem" ubuntu@ec2-184.72.192.136.compute-1.amazonaws.com
 1245  ssh -i "myEC2.pem" ec2-3-223-129-191.compute-1.amazonaws.com
 1246  ssh -i "myEC2.pem" ubuntu@ec2-3-223-129-191.compute-1.amazonaws.com
 1247  if curl -s "https://google.com""
 1248  then
 1249  echo "it worked""; else
 1250  if curl -s "https://google.com""
 1251  then
 1252  echo "it worked"
 1253  if curl -s "https://google.com""
 1254  then
 1255  echo "it worked!"
 1256  else
 1257  echo "it failed"
 1258  fi
 1259  if curl -s "https://google.com"; then echo "it worked"; else echo "it failed"; fi
 1260  cd 3\exercises\6\.circleci
 1261  cd 3\exercises\6\.circleci\
 1262  cd 3/exercises/
 1263  mkdir 7 ; cp -r 6/. 7/
 1264  S3_BUCKET_NAME=mybayurzxbucket
 1265  echo $S3_BUCKET_NAME 
 1266  aws cloudformation deploy --template-file cloudfront.yml --stack-name production-distro --parameter-overrides PipelineID="${S3_BUCKET_NAME}" \ 
 1267  cd 3\exercises\8\
 1268  ls
 1269  cd 8
 1270  ls
 1271  aws cloudformation deploy --template-file cloudfront.yml --stack-name production-distro --parameter-overrides PipelineID="${S3_BUCKET_NAME}" --tags project=udapeople &
 1272  cd ..
 1273  cp -r 7/. 8/
 1274  cd
 1275  cd devops/
 1276  ls
 1277  ssh -i "myEC2.pem" ec2-user@ec2-44-204-19-101.compute-1.amazonaws.com
 1278  curl ec2-44-204-19-101.compute-1.amazonaws.com:9090
 1279  ssh -i "myEC2.pem" ec2-user@ec2-44-204-19-101.compute-1.amazonaws.com
 1280  cd
 1281  cd devops/
 1282  ls
 1283  ssh -i "myEC2.pem" ec2-user@ec2-44-204-19-101.compute-1.amazonaws.com
 1284  wget -i https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/utils/SafeERC20.sol
 1285  wget https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/utils/SafeERC20.sol
 1286  wget https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-contracts/master/contracts/token/ERC20/utils/SafeERC20.sol -o
 1287  curl -d 'email=bayurzx@gmail.com' https://kvdb.io
 1288  curl https://kvdb.io/981qXwizoq758yeL6c3Gc4/migration_$\{CIRCLE_WORKFLOW_ID:0:5\}  -d '1'
 1289  curl --insecure  https://kvdb.io/981qXwizoq758yeL6c3Gc4/migration_$\{CIRCLE_WORKFLOW_ID:0:5\}
 1290  cd Desktop/
 1291  head pickup.txt 
 1292  curl --insecure  https://kvdb.io/981qXwizoq758yeL6c3Gc4/migration_$\{CIRCLE_WORKFLOW_ID:0:5\}
 1293  tree --help
 1294  tree ./Desktop/Azure/
 1295  tree ./Desktop/Azure/oauth-msal-starter
 1296  tree ./Desktop/Azure/monitor-log-starter
 1297  cd Desktop/
 1298  mkdir yoo/ ; cp pickup.txt yoo/
 1299  cd Desktop/
 1300  echo $(head ./pickup.txt) and $(tail ./pickup.txt) > doci.txt
 1301  cat doci.txt 
 1302  cat pickup.txt 
 1303  echo "yoooooooooooooo" | less
 1304  cd Desktop/
 1305  cat pickup.txt | less
 1306  cat pickup.txt | more
 1307  touch typewriter.txt ; notepad.exe typewriter.txt
 1308  cat typewriter.txt 
 1309  ./typewriter.txt
 1310  . ./typewriter.txt 
 1311  touch typewriter1.txt ; notepad.exe typewriter1.txt
 1312  . ./typewriter1.txt 
 1313  name = "john doe"
 1314  $name = "john doe"
 1315  export name = "john doe"
 1316  name="john doe"
 1317  $name
 1318  echo $name
 1319  echo name
 1320  echo "${name}"
 1321  echo ${name}
 1322  echo my name is $name
 1323  cd 3/project/.circleci/files/
 1324  aws cloudformation deploy          --template-file .circleci/files/cloudfront.yml          --stack-name InitialStack          --parameter-overrides WorkflowID=udapeople-bayurzx
 1325  cd ../../
 1326  aws cloudformation deploy          --template-file .circleci/files/cloudfront.yml          --stack-name InitialStack          --parameter-overrides WorkflowID=udapeople-bayurzx
 1327  aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=tag:project,Values=Udapeople --output text
 1328  aws ec2 describe-instances --query 'Reservations[*].Instances[0].PublicIpAddress' --filters Name=tag:project,Values=Udapeople --output text
 1329  aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:project,Values=Udapeople --output text
 1330  aws ec2 describe-instances --query 'Reservations[1].Instances[0].PublicIpAddress' --filters Name=tag:project,Values=Udapeople --output text
 1331  aws ec2 describe-instances --query 'Reservations[1].Instances[*].PublicIpAddress' --filters Name=tag:project,Values=Udapeople --output text
 1332  aws ec2 describe-instances --query 'Reservations[3].Instances[*].PublicIpAddress' --filters Name=tag:project,Values=Udapeople --output text
 1333  aws ec2 describe-instances --query 'Reservations[-1].Instances[*].PublicIpAddress' --filters Name=tag:project,Values=Udapeople --output text
 1334  if curl "http://54.208.172.180:3030/api/status" | grep "ok";             then                 return 0;             else                 return 1;             fi
 1335  aws ec2 describe-instances             --query 'Reservations[*].Instances[*].PublicIpAddress'             --filters Name=tag:project,Values=Udapeople             --output text
 1336  aws ec2 describe-instances             --query 'Reservations[-1].Instances[*].PublicIpAddress'             --filters Name=tag:project,Values=Udapeople             --output text
 1337  aws ec2 describe-instances             --query 'Reservations[*].Instances[*].PublicIpAddress'             --filters Name=tag:project,Values=Udapeople             --output text
 1338  aws ec2 describe-instances             --query 'Reservations[*].Instances[-1].PublicIpAddress'             --filters Name=tag:project,Values=Udapeople             --output text
 1339  aws ec2 describe-instances             --query 'Reservations[3].Instances[*].PublicIpAddress'             --filters Name=tag:project,Values=Udapeople             --output text
 1340  aws ec2 describe-instances             --query 'Reservations[2].Instances[*].PublicIpAddress'             --filters Name=tag:project,Values=Udapeople             --output text
 1341  aws ec2 describe-instances             --query 'Reservations[-1:].Instances[*].PublicIpAddress'             --filters Name=tag:project,Values=Udapeople             --output text
 1342  aws ec2 describe-instances             --query 'Reservations[-1:0].Instances[*].PublicIpAddress'             --filters Name=tag:project,Values=Udapeople             --output text
 1343  aws ec2 describe-instances
 1344  aws ec2 describe-instances --query 'Reservations[-1:].Instances[*].PublicIpAddress' --filters Name=tag:project,Values=Udapeople --output json
 1345  aws ec2 describe-instances --query 'Reservations[-2:].Instances[*].PublicIpAddress' --filters Name=tag:project,Values=Udapeople --output json
 1346  aws ec2 describe-instances --query 'Reservations[-2:].Instances[*].PublicIpAddress' --filters Name=tag:project,Values=Udapeople --output text
 1347  curl https://google.com/api/status | grep "ok"
 1348  if curl https://google.com/api/status | grep "ok";             then                 return 0;             else                 return 1;             fi
 1349  curl http://54.208.172.180:3030/api/status | grep "ok"
 1350  curl http://54.208.172.180/
 1351  curl http://54.208.172.120/
 1352  curl http://54.208.172.180:3030/
 1353  curl http://44.203.197.182:3030/api/status >> dosnd.txt
 1354  if curl "http://44.203.197.182:3030/api/status" | grep "";             then                 return 0;             else                 return 1;             fi
 1355  . dosnd.txt 
 1356  . dosnd.sh 
 1357  cd
 1358  ls
 1359  cp /mnt/c/Users/USER/Desktop/Azure/cloud_devops/dosnd.sh .
 1360  . dosnd.sh 
 1361  cat dosnd.sh 
 1362  . dosnd.sh 
 1363  cd /mnt/c/Users/USER/Desktop/Azure/cloud_devops/
 1364  if curl "http://44.203.197.182:3030/api/status" | grep "";             then                 echo 0;             else                 echo 1;             fi
 1365  2 -eq 4
 1366  if 2 -eq 4; then  echo "Yoo"; else echo "nah"; fi
 1367  if [[2 -eq 4]]; then  echo "Yoo"; else echo "nah"; fi
 1368  if $2 -eq 4; then  echo "Yoo"; else echo "nah"; fi
 1369  if $2 -eq $4; then  echo "Yoo"; else echo "nah"; fi
 1370  if [[ $1 -eq 0 ]]; then     echo "You provided zero as the first argument."; else   echo "You should provide zero."; fi
 1371  if [[ $2 -eq 0 ]]; then  echo "Yoo"; else echo "nah"; fi
 1372  if [[$2 -eq 0]]; then  echo "Yoo"; else echo "nah"; fi
 1373  [[ $2 -eq 0 ]]
 1374  echo [[ $2 -eq 0 ]]
 1375  if echo "whaaaaaa" | grep ""; then     echo 0; else     echo 1; fi
 1376  aws cloudformation list-exports             --query "Exports[?Name==\`WorkflowID\`].Value"             --no-paginate --output text
 1377  cd
 1378  cd devops/
 1379  ls
 1380  ssh -i "myEC2.pem" ubuntu@ec2-54-211-25-15.compute-1.amazonaws.com
 1381  aws ec2 describe-instances             --query 'Reservations[*].Instances[*].PublicIpAddress'
 1382  aws s3 rm "s3://udapeople-5cfec82  --recursive
 1383  aws s3 rm s3://udapeople-5cfec82  --recursive
 1384  aws s3 rm s3://udapeople-d80be48  --recursive
 1385  aws s3 rm s3://udapeople-8a4f527  --recursive
 1386  aws s3 rm s3://udapeople-fdb6570  --recursive
 1387  aws s3 rm s3://udapeople-bc49c32  --recursive
 1388  aws s3 rm s3://udapeople-85f6c1f  --recursive
 1389  aws ec2 describe-instances             --query 'Reservations[*].Instances[*].PublicIpAddress'
 1390  aws s3 rm s3://mybucket-a9a2d55  --recursive
 1391  aws ec2 describe-instances             --query 'Reservations[*].Instances[*].PublicIpAddress'
 1392  curl http://44.201.143.159:3030/api/status
 1393  curl -s -v --connect-timeout 30 --retry-connrefused 5 http://44.201.143.159:3030/api/status
 1394  curl -v --connect-timeout 30 --retry-connrefused 5 http://44.201.143.159:3030/api/status
 1395  ls ~/devops/
 1396  ~/devops/ ssh -i "myEC2.pem" ubuntu@ec2-44-201-143-159.compute-1.amazonaws.com
 1397  ~/devops/. ssh -i "myEC2.pem" ubuntu@ec2-44-201-143-159.compute-1.amazonaws.com
 1398  (cd ~/devops/ && ssh -i "myEC2.pem" ubuntu@ec2-44-201-143-159.compute-1.amazonaws.com )
 1399  aws rds describe-db-instances   --query "*[].[DBInstanceIdentifier,Endpoint.Address,Endpoint.Port,MasterUsername]"
 1400  telnet rds-postgres.cv4lt1xunhqn.us-east-1.rds.amazonaws.com 5432
 1401  nc -zv rds-postgres.cv4lt1xunhqn.us-east-1.rds.amazonaws.com 5432
 1402  nc -zv rds-postgres.cv4lt1xunhqn.us-east-1.rds.amazonaws.com 5432 &
 1403  telnet rds-postgres.cv4lt1xunhqn.us-east-1.rds.amazonaws.com 5432
 1404  jobs
 1405  top
 1406  htop
 1407  netstat
 1408  sudo apt install net-tools
 1409  sudo apt update
 1410  sudo apt install net-tools
 1411  netstat -tulpn
 1412  lsof -i tcp:80
 1413  lsof -i tcp
 1414  telnet rds-udapeople.cv4lt1xunhqn.us-east-1.rds.amazonaws.com
 1415  nc -zv rds-postgres.cv4lt1xunhqn.us-east-1.rds.amazonaws.com 5432
 1416  telnet rds-postgres.cv4lt1xunhqn.us-east-1.rds.amazonaws.com 5432
 1417  tenet rds-udapeople.cv4lt1xunhqn.us-east-1.rds.amazonaws.com  5432
 1418  telnet rds-udapeople.cv4lt1xunhqn.us-east-1.rds.amazonaws.com  5432
 1419  curl rds-udapeople.cv4lt1xunhqn.us-east-1.rds.amazonaws.com
 1420  curl rds-udapeople.cv4lt1xunhqn.us-east-1.rds.amazonaws.com/api/status
 1421  curl 34.224.175.234/api/status
 1422  curl 34.224.175.234:5432/api/status
 1423  curl 34.224.175.234:3030/api/status
 1424  aws cloudformation list-stacks --query "StackSummaries[*].StackName"                     --stack-status-filter CREATE_COMPLETE --no-paginate --output text
 1425  export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
 1426                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
 1427  LIST=(1 2 3)
 1428  for i in "${LIST[@]}"; do     echo "example.$i"; done
 1429  LIST=(1 2 3)
 1430  for i in "${LIST[*]}"; do     echo "example.$i"; done
 1431  echo ${LIST[@]}
 1432  echo ${LIST[*]}
 1433  cd ../../
 1434  notepad.exe stack.sh
 1435  cat stack.sh 
 1436  . ./stack.sh 
 1437  export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
 1438                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
 1439  . ./stack.sh 
 1440  echo $STACKS
 1441  export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
 1442                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
 1443  echo $STACKS
 1444  echo $STACKS[@]
 1445  aws cloudformation list-stacks --query "StackSummaries[*].StackName"                     --stack-status-filter CREATE_COMPLETE --no-paginate --output text
 1446  . ./stack.sh 
 1447  echo "exporting val 1 & 2"
 1448  export OldWorkflowID=abcd
 1449  export CIRCLE_WORKFLOW_ID=efgh
 1450  echo "exporting val 1 & 2"
 1451  export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
 1452  echo OldWorkflowID: "$OldWorkflowID"
 1453  echo "New WorkflowID is ${CIRCLE_WORKFLOW_ID}"
 1454  echo Stack names: "${STACKS[@]}"  
 1455  for i in "${STACKS[@]}"; do echo "On stack: $i"   if [[ "$i" != "${CIRCLE_WORKFLOW_ID}" ]];   then     echo "   *********** Old Stack Found   *************    ";     echo "On stack: $i"     echo "aws s3 rm s3://udapeople-${OldWorkflowID} --recursive";     echo "aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}";     echo "aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}";   else      echo "   ***********  Stack NOT Found   *************    ";   fi done
 1456  echo ${CIRCLE_WORKFLOW_ID: -7}
 1457  echo "${CIRCLE_WORKFLOW_ID: -7}"
 1458  echo $CIRCLE_WORKFLOW_ID
 1459  echo "${CIRCLE_WORKFLOW_ID: -2}"
 1460  echo ${CIRCLE_WORKFLOW_ID: -2}
 1461  echo "exporting val 1 & 2"
 1462  export OldWorkflowID=abcd
 1463  export CIRCLE_WORKFLOW_ID=efgh
 1464  echo "exporting val 1 & 2"
 1465  export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
 1466  echo OldWorkflowID: "$OldWorkflowID"
 1467  echo "New WorkflowID is ${CIRCLE_WORKFLOW_ID}"
 1468  echo Stack names: "${STACKS[@]}"
 1469  for i in "${STACKS[@]}"; do echo "On stack: $i"   if [[ "$i" != "${CIRCLE_WORKFLOW_ID}" ]];   then     echo "   *********** Old Stack Found   *************    ";     echo "On stack: $i"     echo "aws s3 rm s3://udapeople-${i: -7} --recursive";     echo "aws cloudformation delete-stack --stack-name udapeople-backend-${i: -7}";     echo "aws cloudformation delete-stack --stack-name udapeople-frontend-${i: -7}";   else      echo "   ***********  Stack NOT Found   *************    ";   fi done
 1470  aws cloudformation list-stacks --query "StackSummaries[*].StackName"                     --stack-status-filter CREATE_COMPLETE --no-paginate --output text
 1471  aws cloudformation list-stacks
 1472  clear
 1473  aws cloudformation list-stacks --query "StackSummaries[*].StackName"                     --stack-status-filter CREATE_COMPLETE --no-paginate --output text
 1474  echo $USER 
 1475  if [[ $USER == 'bob' ]] || [[ $USER == 'bayurzx' ]]; then ls -alh; else ls; fi
 1476  if [[ $USER == 'bob' ]] && [[ $USER == 'bayurzx' ]]; then ls -alh; else ls; fi
 1477  aws ec2 describe-instances             --query 'Reservations[*].Instances[*]
 1478  aws ec2 describe-instances             --query 'Reservations[*].Instances[*]
 1479  aws ec2 describe-instances             --query 'Reservations[*].Instances[*].PublicIpAddress'
 1480  cd 3/project/
 1481  tree .
 1482  tree -help
 1483  tree --help
 1484  start.exe .
 1485  start .
 1486  tree -P '*end' '.circle*'
 1487  tree -P '*end'
 1488  tree -P '.cir*'
 1489  tree -P '.circleci'
 1490  cd .circleci/
 1491  tree .
 1492  history >  ../../../../../myhist.txt
 1493  aws s3 mk --help
 1494  aws s3 mk help
 1495  aws s3 mb help
 1496  ls ~/devops/
 1497  ssh -i "~/devops/myEC2.pem" ubuntu@ec2-35-171-9-88.compute-1.amazonaws.com
 1498  cd 3/project/
 1499  pwd
 1500  ssh -i "~/devops/myEC2.pem" ubuntu@ec2-35-171-9-88.compute-1.amazonaws.com
 1501  ssh -i "myEC2.pem" ubuntu@ec2-35-171-9-88.compute-1.amazonaws.com
 1502  ssh -i "~/devops/myEC2.pem" ubuntu@ec2-35-171-9-88.compute-1.amazonaws.com
 1503  ls /tmp/
 1504  clear
 1505  ssh -i "~/devops/myEC2.pem" ubuntu@ec2-35-171-9-88.compute-1.amazonaws.com
 1506  ssh -i "~/devops/myEC2.pem" ubuntu@ec2-35-175-242-211.compute-1.amazonaws.com
 1507  ssh -i "~/devops/myEC2.pem" ubuntu@ec2-174-129-85-166.compute-1.amazonaws.com
 1508  ssh -i "~/devops/myEC2.pem" ubuntu@ec2-35-171-9-88.compute-1.amazonaws.com
 1509  ssh -i "~/devops/myEC2.pem" ubuntu@ec2-44-201-235-151.compute-1.amazonaws.com
 1510  ssh -i "~/devops/myEC2.pem" ubuntu@ec2-174-129-85-166.compute-1.amazonaws.com
 1511  aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text
 1512  aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-" --output text
 1513  aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-129b994" --output text
 1514  export BACKEND_IP=34.238.156.199
 1515  export API_URL="http://${BACKEND_IP}:3030/api/status"
 1516  echo "API_URL is ${API_URL}"
 1517  curl "${API_URL}"
 1518  ssh -i "~/devops/myEC2.pem" ubuntu@ec2-3-82-142-172.compute-1.amazonaws.com
 1519  aws cloudformation list-exports             --query "Exports[?Name==\`WorkflowID\`].Value"             --no-paginate --output text
 1520  aws cloudformation list-exports
 1521  aws cloudformation list-stacks --query "StackSummaries[*].StackName"                     --stack-status-filter CREATE_COMPLETE --no-paginate --output text
 1522  aws ec2 describe-instances             --query 'Reservations[*].Instances[*].PublicIpAddress'
 1523  aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress'
 1524  ssh -i "~/devops/.myEC2.pem" ubuntu@ec2-184-72-192-136.compute-1.amazonaws.com
 1525  ssh -i "~/devops/myEC2.pem" ubuntu@ec2-184-72-192-136.compute-1.amazonaws.com
 1526  aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress'
 1527  aws opsworks delete-instance     --region us-east-1     --instance-id 3a21cfac-4a1f-4ce2-a921-b2cfba6f7771
 1528  aws opsworks delete-instance     --region us-east-1     --instance-id i-09e892b430f377c6c
 1529  aws delete-instance     --region us-east-1     --instance-id i-09e892b430f377c6c
 1530  awsec2  delete-instance     --region us-east-1     --instance-id i-09e892b430f377c6c
 1531  aws ec2  delete-instance     --region us-east-1     --instance-id i-09e892b430f377c6c
 1532  aws ec2 terminate-instances --instance-ids i-09e892b430f377c6c
 1533  aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress'
 1534  ls
 1535  aws ec2 describe-instances             --query 'Reservations[*].Instances[*].PublicIpAddress --output text
 1536  '
 1537  aws ec2 describe-instances             --query 'Reservations[*].Instances[*].PublicIpAddress' --output text
 1538  aws ec2 describe-instances             --query 'Reservations[*].Instances[*].PublicIpAddress'
 1539  ls ~/.bashrc 
 1540  cat ~/.bashrc 
 1541  aws cloudformation list-stacks --query "StackSummaries[*].StackName"                     --stack-status-filter CREATE_COMPLETE --no-paginate --output text
 1542  export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName"  --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
 1543  export CIRCLE_WORKFLOW_ID=38c2d55
 1544  echo "New WorkflowID is ${CIRCLE_WORKFLOW_ID}"
 1545  echo Stack names: "${STACKS[@]}"
 1546  for i in "${STACKS[@]}"; do   echo "On stack: $i"   if [[ "$i" != "udapeople-backend-${CIRCLE_WORKFLOW_ID}" ]] && [[ "$i" != "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" ]] && [[ "$i" =~ "udapeople" ]] ;   then     echo "   *********** Old Stack Found   *************    "   else      echo "   ***********  Old Stack NOT Found   *************    ";   fi done
 1547  for i in "${STACKS[@]}"; do   echo "On stack: $i"   if [[ "$i" != "udapeople-backend-${CIRCLE_WORKFLOW_ID}" ]] && [[ "$i" != "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" ]] ;   then     echo "   *********** Old Stack Found   *************    "   else      echo "   ***********  Old Stack NOT Found   *************    ";   fi done
 1548  cd project/
 1549  ls
 1550  brew install hadolint
 1551  sudo apt update
 1552  sudo systemctl status docker
 1553  docker version
 1554  cd /mnt/c/Users/USER/Desktop/Azure/cloud_devops/4/project
 1555  ./make_prediction.sh 
 1556  docker ps
 1557  sudo docker exec -it d9d47dad2059 /bin/bash
 1558  docker ps
 1559  sudo docker exec -it d9d47dad2059 /app
 1560  sudo docker exec -it 9e037970d119 /app
 1561  sudo docker exec -it 9e037970d119 /bin/bash
 1562  ./make_prediction.sh 
 1563  sudo docker exec -it 9e037970d119 /bin/bash
 1564  cd ../../../
 1565  cd ..
 1566  ./read.txt 
 1567  docker images list
 1568  docker status
 1569  docker stats
 1570  docker ps
 1571  docker info
 1572  cat ~/.docker/config.json
 1573  docker login
 1574  cat ~/.docker/config.json
 1575  docker system info | grep -E 'Username|Registry'
 1576  sudo systemctl status docker
 1577  docker-ce --help
 1578  apt list | grep -E apt-transport-https ca-certificates curl software-properties-common
 1579  apt list | grep -E "apt-transport-https" "ca-certificates" "curl" "software-properties-common"
 1580  apt list --installed | grep -E "apt-transport-https" "ca-certificates" "curl" "software-properties-common"
 1581  clear
 1582  xdg-open https://www.google.com
 1583  export dockerpath="bayurzx/microserviceML:v1.0.0"
 1584  echo "Your docker path is ${dockerpath} \n" 
 1585  echo "Your docker path is ${dockerpath} /n" 
 1586  echo -e "Hello\nworld"
 1587  echo $'hello\nworld'
 1588  echo $"hello\nworld"
 1589  echo 'hello\nworld'
 1590  echo 'Your docker path is ${dockerpath} /n' 
 1591  echo "Your docker path is ${dockerpath} /n" 
 1592  echo 'Your docker path is ${dockerpath} \n' 
 1593  echo $'Your docker path is ${dockerpath} \n' 
 1594  echo $"Your docker path is ${dockerpath} \n" 
 1595  echo -e "Your docker path is ${dockerpath} \n" 
 1596  echo -e "\nList kubernetes pods"
 1597  py
 1598  kubectl config view
 1599  cd \Desktop\Azure\cloud_devops\4\project
 1600  cd /Desktop\Azure\cloud_devops\4\project
 1601  cd .\Desktop\Azure\cloud_devops\4\project
 1602  cd ./Desktop/Azure/cloud_devops/4/project
 1603  ls
 1604  kubectl get po
 1605  kubectl config view
 1606  docker ps
 1607  docker image ls
 1608  ./run_docker.sh
 1609  . ./run_docker.sh
 1610  ./run_docker.sh
 1611  . ./run_docker.sh
 1612  ls -l *.sh
 1613  ls ~/
 1614  mkdir  ~/microserviceML
 1615  cp -r . ~/microserviceML/
 1616  cd  ~/microserviceML
 1617  ls
 1618  ./run_docker.sh 
 1619  ls -l ./run_docker.sh 
 1620  sudo ./run_docker.sh 
 1621  chmod u+x run_docker.sh 
 1622  ls -l ./run_docker.sh 
 1623  cd /mnt/c/Users/USER/Desktop/Azure/cloud_devops/4/project
 1624  ./run_docker.sh 
 1625  docker ps
 1626  ./run_docker.sh 
 1627  htop
 1628  ls -l /usr/local/bin/kubectl
 1629  jobs
 1630  cd Desktop/
 1631  sudo docker cp 9e037970d119:/app/output_txt_files/docker_out.json ./prediction.json
 1632  docker cp 9e037970d119:/app/output_txt_files/docker_out.json ./prediction2.json
 1633  docker ps
 1634  docker ps | grep "CONTAINER"
 1635  docker ps -aqf "name=containername"
 1636  docker ps -aqf "name=^containername$"
 1637  docker ps -aqf "name=^containerid$"
 1638  docker ps -aqf "name=^container id$"
 1639  docker ps -a
 1640  docker ps -aqf "name=microserviceml"
 1641  docker ps -aqf "name=hardcore_lalande"
 1642  docker ps -aqf "image=microserviceml"
 1643  docker container ls  | grep 'container-name' | awk '{print $1}'
 1644  docker container ls
 1645  docker container ls -a | awk 'NR>1 {print $1, $2}'
 1646  docker container ls -a | awk 'NR>1 {print $1}'
 1647  docker container ls | awk 'NR>1 {print $1}'
 1648  docker container ls -a | awk 'NR>1 {print $1, $2}' | grep "microserviceml"
 1649  docker container ls -a | awk 'NR>1 {print $1, $2}' | grep "microserviceml" | awk 'NR>1 {print $1}'
 1650  docker container ls -a | awk 'NR>1 {print $1, $2}' | grep "microserviceml" | awk 'NR>1 {print $0}'
 1651  docker container ls -a | awk 'NR>1 {print $1, $2}' | grep "microserviceml" | awk '{print $1}'
 1652  docker ps | awk 'NR>1 {print $1, $2}' | grep "microserviceml" | awk '{print $1}'
 1653  docker cp $(docker ps | awk 'NR>1 {print $1, $2}' | grep "microserviceml" | awk '{print $1}'):/app/output_txt_files/docker_out.json ./prediction3.json
 1654  cd Azure/cloud_devops/4
 1655  cd project/
 1656  docker cp $(docker ps | awk 'NR>1 {print $1, $2}' | grep "microserviceml" | awk '{print $1}'):/app/output_txt_files/docker_out.json ./output_txt_files/prediction2.json
 1657  docker cp $(docker ps | awk 'NR>1 {print $1, $2}' | grep "microserviceml" | awk '{print $1}'):/app/output_txt_files/docker_out.json ./output_txt_files/docker_out.txt
 1658  echo "Hello world!" | (read var1 var2; echo $var1; echo $var2)
 1659  read -d "-"
 1660  echo "Enter the user name: "  
 1661  read first_name  
 1662  ./upload_docker.sh 
 1663  kubectl config view
 1664  ./run_kubernetes.sh 
 1665  htop
 1666  sudo apt update
 1667  sudo apt install virtualbox virtualbox-ext-pack
 1668  wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
 1669  chmod +x minikube-linux-amd64
 1670  sudo mv minikube-linux-amd64 /usr/local/bin/minikube
 1671  ls -l /usr/local/bin/minikube
 1672  minikube version
 1673  ls -l /usr/local/bin/kubectl
 1674  kubectl version -o json  --client
 1675  curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
 1676  chmod +x ./kubectl
 1677  sudo mv ./kubectl /usr/local/bin/kubectl
 1678  kubectl version -o json  --client
 1679  minikube start
 1680  docker ps
 1681  minikube start
 1682  minikube status
 1683  kubectl cluster-info
 1684  kubectl config view
 1685  kubectl get nodes
 1686  minikube ssh
 1687  ./run_kubernetes.sh 
 1688  kubectl get po
 1689  kubectl get po &
 1690  kubectl get po
 1691  kubectl describe microproject
 1692  kubectl get po
 1693  kubectl describe microprojectml
 1694  kubectl get po
 1695  docker images list
 1696  minikube stop
 1697  ps
 1698  cd Desktop/
 1699  docker images list
 1700  cd Desktop/
 1701  docker images list
 1702  cd Desktop/
 1703  docker images list
 1704  kubectl config view
 1705  minikube start
 1706  kubectl get po
 1707  minikube start
 1708  docker --version
 1709  wsl.exe -l -v
 1710  wsl.exe -l
 1711  wsl --set-default Ubuntu-20.04 .
 1712  wsl.exe -l -v
 1713  wsl.exe -l
 1714  docker --version
 1715  kubectl get po
 1716  minikube status
 1717  cd Desktop
 1718  minikube status
 1719  minikube start
 1720  kubectl get pods
 1721  ls -al ~/.docker/config.json 
 1722  cat /home/bayurzx/.docker/config.json
 1723  kubectl describe pod microproject
 1724  docker pull bayurzx/microserviceml:v1.0.0
 1725  vi /var/paas/kubernetes/kubelet/kubelet
 1726  vi /opt/cloud/cce/kubernetes/kubelet/kubelet
 1727  ls /opt/cloud/cce/kubernetes/kubelet/
 1728  ls /opt/cloud/cce/
 1729  ls /opt
 1730  ls /opt/az
 1731  ls /var/paas/
 1732  systemctl status kubelet
 1733  kubectl describe pod microproject
 1734  cp ~/devops/myEC2.pem .
 1735  ls -l myEC2.pem 
 1736  cd calculator/
 1737  cargo run -- Ade
 1738  cargo run -- Ade yemi
 1739  sudo apt update
 1740  curl https://sh.rustup.rs -sSf | sh
 1741  source $HOME/.cargo/env
 1742  rustc --version
 1743  ls -al
 1744  cd calculator/
 1745  cargo run
 1746  cargo run --Ade
 1747  cargo run -- Ade
 1748  cd calculator/
 1749  cargo run -- Ade
 1750  cargo run -- Ade o m o l u m o
 1751  cargo run -- Ade O m 0 l u m o
 1752  cargo run -- Ade O m 0 l u m +
 1753  cargo run -- 1 + 2
 1754  cargo run -- 1 - 2
 1755  cargo run -- 1 / 2
 1756  cargo run -- 1 u 2
 1757  cargo run -- 1 / 2
 1758  cargo run -- 1 n 2
 1759  cargo run -- 1 * 2
 1760  cargo run -- 1 / 2
 1761  cargo run -- 1 * 2
 1762  cargo run -- 1 \* 2
 1763  cargo run -- 1 * 2
 1764  cargo run -- 1 x 2
 1765  cargo build -- init
 1766  cargo build --init
 1767  cargo build --release
 1768  cd target/release/
 1769  cargo run -- 1 x 2
 1770  calculator 1 x 2
 1771  ./calculator 1 x 2
 1772  ls -al
 1773  cd ../../
 1774  cd ..
 1775  touch combiner/some.txt
 1776  touch ./combiner/some.txt -f
 1777  mkdir combiner ; cd combiner
 1778  cd ..; cargo new combiner
 1779  cd ..; rm combiner ; cargo new combiner
 1780  rmdir combiner
 1781  rmdir combiner -f
 1782  rm combiner -fr
 1783  cd rust/
 1784  ls
 1785  rm combiner/
 1786  ls combiner/
 1787  rmdir combiner/
 1788  ls
 1789  cargo new combiner
 1790  cd combiner/
 1791  cargo run
 1792  cd src/
 1793  touch args.rs
 1794  code args.rs 
 1795  code.exe args.rs 
 1796  cd calculator/
 1797  git status
 1798  git add . ; git commit -m "initial commit"
 1799  cd ../combiner/3
 1800  git add . ; git commit -m "initial commit"2
 1801  cargo run
 1802  cargo run -- 1 2 3
 1803  cargo run
 1804  ls img/
 1805  mv img/5Sgml4s.png img/1.png; mv img/Anime\ to\ watch.jpg img/2.png
 1806  cargo run -- img/1.png img/2.png img/test.png
 1807  rm img/1.png img/2.png 
 1808  mv img/birdd.jpg 1.jpg ; mv img/camper1.jpg 2.jpg
 1809  mv *.jpg img/
 1810  cargo run -- img/1.jpg img/2.jpg img/test.jpg
 1811  cargo run -- img/4.jpg img/3.jpg img/test.jpg
 1812  cargo run -- img/1.jpg img/2.jpg img/test.jpg
 1813  cd combiner/
 1814  cargo run -- img/1.jpg img/2.jpg img/test.jpg
 1815  cargo run -- img/1.jpg img/2.jpg img/test1.jpg
 1816  rm img/test*
 1817  git add . ; git commit -m "Successfully fixed all error and combined images"
 1818  gh
 1819  git push
 1820  git add . ; git commit -m "CRLF and LF"
 1821  code LICENSE 
 1822  git add . ; git commit -m "CRLF and LF"
 1823  git push
 1824  cargo run -- img/1.jpg img/2.jpg img/test2.jpg
 1825  cd combiner/
 1826  cargo run -- img/1.jpg img/2.jpg img/test2.jpg
 1827  cargo build --release
 1828  ls
 1829  ./target/release/combiner -- img/1.jpg img/2.jpg img/prod.jpg
 1830  target/release/combiner -- img/1.jpg img/2.jpg img/prod.jpg
 1831  target/release/combinemr -- img/1.jpg img/2.jpg img/prod.jpg
 1832  target/release/combiner -- img/1.jpg img/2.jpg img/prod.jpg
 1833  target/release/combiner -- ./img/1.jpg ./img/2.jpg img/prod.jpg
 1834  ls im*
 1835  history > his.txt
